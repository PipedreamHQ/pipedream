const { axios } = require("@pipedreamhq/platform");
const zoom = require("../../zoom.app");

module.exports = {
    key: "zoom-create-webinar",
    name: "Create webinar",
    description: "Creates a Zoom webinar / `Pro or higher plan with a Webinar Add-on`",
    type: "action",
    version: "0.0.1",
    props: {
        zoom,
        userId: {
            label: "UserId",
            type: "string",
            description: "The user id or email, defaults to the authenticated user",
            optional: false,
            default: "me"
        },
        topic: {
          label: "Topic",
          type: "string",
          description: "Webinar topic.",
          optional: true,
          default: ""
        },
        type: {
          label: "Type",
          type: "integer",
          description: 
          `5 - Webinar (default).
          6 - Recurring webinar with no fixed time.
          9 - Recurring webinar with a fixed time.`,
          options: [
            {
              label: "5 - Webinar",
              value: 5,
            },
            {
                label: "6 - Recurring webinar with no fixed time",
                value: 6,
            },
            {
                label: "9 - Recurring webinar with a fixed time",
                value: 9,
            },
          ],
          optional: true,
          default: 5
        },
        startTime: {
          label: "Start time",
          type: "string",
          description: `Meeting start time. We support two formats for 'start_time' - local time and GMT.
          To set time as GMT the format should be 'yyyy-MM-ddTHH:mm:ssZ'.
          To set time using a specific timezone, use 'yyyy-MM-ddTHH:mm:ss' format and specify the timezone ID in the timezone field OR leave it blank 
          and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.
          The 'start_time' should only be used for scheduled and / or recurring webinars with fixed time.`,
          optional: true,
          default: ""
        },
        duration: {
          label: "Duration",
          type: "integer",
          description: "Webinar duration (minutes). Used for scheduled webinars only. defaults to 60 mins",
          optional: true,
          default: 60
        },
        timezone: {
          label: "Timezone",
          type: "string",
          description: 
          `Time zone to format 'start_time'. 
          For example, 'America/Los_Angeles'. 
          For scheduled meetings only. 
          Please reference zoom's [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.`,
          optional: true,
          default: ""
        },
        password: {
          label: "Password",
          type: "string",
          description: `Webinar passcode. Passcode may only contain the following characters: '[a-z A-Z 0-9 @ - _ * !]'. Max of 10 characters.
          If 'Require a passcode when scheduling new meetings' setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, 
          the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.`,
          optional: true,
          default: ""
        },
        agenda: {
          label: "Agenda",
          type: "string",
          description: "Webinar description.",
          optional: true,
          default: ""
        },
        trackingFields: {
          label: "Tracking fields",
          type: "any",
          description: "information about the webinar's tracking fields. item schema: '[{field:value},{field:value}]'",
          optional: true,
          default: {}
        },
        recurrence: {
          label: "Recurrence",
          type: "object",
          description: `
          Recurrence object. Use this object only for a webinar of type '9' i.e., a recurring webinar with fixed time.

          See documentation for [recurrence object fields](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate).
          Example: 
          '
          {
            "type": 2, // 1 - Daily, 2 - Weekly, 3 - Monthly, 4 - Yearly
            "repeat_interval": 3, // Number of days/weeks/months/years between each occurrence.
            "weekly_days": "1, 2, 3, 4, 5", // 'string' Days of the week when the meeting should occur (sunday to saturday).
            "monthly_day": 1, // 'integer'  Day of the month when the meeting should occur.
            "monthly_week": 1, // 'integer' Week of the month when the meeting should occur.
            "monthly_week_day": 1, // 'integer' Day of the week when the meeting should occur.
            "end_times": 1, // 'integer' Number of occurrences at which the meeting should end.
            "end_date_time": "2020-01-01T00:00:00Z" // 'string' End date and time of the meeting.
          }
          '
          `,
          optional: true,
          default: {}
        },
        settings: {
          label: "Settings",
          type: "object",
          description: "See documentation for [webinar settings field](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate)",
          optional: true,
          default: {}
        }

    },
    async run() {
        const requestBody = this.zoom.filterEmptyRequestFields(
          {
            topic: this.topic,
            type: this.type,
            start_time: this.startTime,
            duration: this.duration,
            timezone: this.timezone,
            password: this.password,
            agenda: this.agenda,
            tracking_fields: this.trackingFields,
            recurrence: this.recurrence,
            settings: this.settings
          }
        );
        const requestConfig = this.zoom.makeRequestConfig(
          `/users/${this.userId}/webinars`,
          "post",
          requestBody
        );
        try {
          let response = await axios(this, requestConfig);
          return response;
        } catch (error) {
            return error.response.data;
        }
    }
}