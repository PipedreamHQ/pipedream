import { axios } from "@pipedream/platform";
import {
  FORMATS,
  PDF_MARGIN,
  PDF_MEDIA,
  PDF_ORIENTATION,
  PDF_SIZES,
  S3_STORAGE_CLASSES,
  USER_AGENTS,
  WAIT_UNTIL,
} from "./actions/common/constants.mjs";
import {
  generateToken,
  toQueryString,
} from "./common/utils.mjs";

export default {
  type: "app",
  app: "urlbox_io",
  propDefinitions: {
    url: {
      type: "string",
      label: "URL",
      description: "The URL of the website you want to screenshot.",
    },
    html: {
      type: "string",
      label: "HTML",
      description: "The html that you want to take a screenshot.",
    },
    format: {
      type: "string",
      label: "Format",
      description: "Format of the resulting screenshot image. Default is `PNG`",
      default: "png",
      options: FORMATS,
    },
    width: {
      type: "integer",
      label: "Width",
      description: "Viewport width of the browser in pixels. Default is 1280.",
      optional: true,
    },
    height: {
      type: "integer",
      label: "Width",
      description: "Viewport height of the browser in pixels. Default is 1024.",
      optional: true,
    },
    fullPage: {
      type: "boolean",
      label: "Full Page",
      description: "Specify whether to capture the full-length of the website. Default is FALSE.",
      optional: true,
    },
    selector: {
      type: "string",
      label: "Selector",
      description: "Take a screenshot of the element that matches this selector.",
      optional: true,
    },
    gpu: {
      type: "boolean",
      label: "GPU",
      description: "Enable GPU acceleration to render 3D scenes and heavy WebGL content. This is a beta feature and requires pre-approval. Please contact support to enable this feature on your account.",
      optional: true,
    },
    blockAds: {
      type: "boolean",
      label: "Block Ads",
      description: "Blocks requests from popular advertising networks from loading.",
      optional: true,
    },
    blockUrls: {
      type: "string",
      label: "Block Urls",
      description: "Block requests from specific urls from loading.",
      optional: true,
    },
    hideCookieBanners: {
      type: "boolean",
      label: "Hide Cookie Banners",
      description: "Automatically hides cookie banners from most websites.",
      optional: true,
    },
    clickAccept: {
      type: "boolean",
      label: "Click Accept",
      description: "Automatically clicks 'Accept' buttons, in order to dismiss popups.",
      optional: true,
    },
    hideSelector: {
      type: "string",
      label: "Hide Selector",
      description: "Hides all elements that match the element selector by setting their style to `display:none !important;`. Useful for hiding popups.",
      optional: true,
    },
    js: {
      type: "string",
      label: "JS",
      description: "Inject (and execute) custom JavaScript on the page.",
      optional: true,
    },
    css: {
      type: "string",
      label: "CSS",
      description: "Inject custom CSS into the page.",
      optional: true,
    },
    darkMode: {
      type: "boolean",
      label: "Dark Mode",
      description: "Emulate dark mode on websites by setting prefers-color-scheme: dark.",
      optional: true,
    },
    retina: {
      type: "boolean",
      label: "Retina",
      description: "Take a 'retina' or high definition screenshot equivalent to setting a device pixel ratio of 2.0 or @2x. Please note that retina screenshots will be double the normal dimensions and will normally take slightly longer to process due to the much bigger image size. Default is FALSE",
      optional: true,
    },
    thumbWidth: {
      type: "string",
      label: "Thumb Width",
      description: "The width of the generated thumbnail, in pixels. Omit for a full-size screenshot.",
      optional: true,
    },
    thumbHeight: {
      type: "string",
      label: "Thumb Height",
      description: "The height of the generated thumbnail, in pixels. Omit for a full-size screenshot.",
      optional: true,
    },
    quality: {
      type: "integer",
      label: "Quality",
      description: "The image quality of the resulting screenshot (JPEG/WebP only). Default is 80.",
      optional: true,
    },
    transparent: {
      type: "boolean",
      label: "Transparent",
      description: "If a website has no background color set, the image will have a transparent background (PNG/WebP only).",
      optional: true,
    },
    maxHeight: {
      type: "string",
      label: "Max Height",
      description: "For extremely lengthy websites, it may be preferable to limit the screenshot to a maximum height to prevent Urlbox from spending time scrolling and generating an enormous screenshot.",
      optional: true,
    },
    download: {
      type: "string",
      label: "Download",
      description: "Pass in a filename which sets the content-disposition header on the response. E.g. `download=myfilename.png` This will make the Urlbox link downloadable, and will prompt the user to save the file as `myfilename.png`",
      optional: true,
    },
    pdfPageSize: {
      type: "string",
      label: "PDF Page Size",
      description: "Sets the PDF page size. Setting this option will take precedence over pdf_page_width and pdf_page_height.",
      options: PDF_SIZES,
      optional: true,
    },
    pdfPageWidth: {
      type: "integer",
      label: "PDF Page Width",
      description: "Sets the PDF page width, in pixels.",
      optional: true,
    },
    pdfPageHeight: {
      type: "integer",
      label: "PDF Page Height",
      description: "Sets the PDF page height, in pixels.",
      optional: true,
    },
    pdfMargin: {
      type: "string",
      label: "PDF Margin",
      description: "Sets the margin of the PDF document.",
      options: PDF_MARGIN,
      optional: true,
    },
    pdfMarginTop: {
      type: "integer",
      label: "PDF Margin Top",
      description: "Sets a custom top margin on the PDF.",
      optional: true,
    },
    pdfMarginRight: {
      type: "integer",
      label: "PDF Margin Right",
      description: "Sets a custom right margin on the PDF.",
      optional: true,
    },
    pdfMarginBottom: {
      type: "integer",
      label: "PDF Margin Bottom",
      description: "Sets a custom bottom margin on the PDF.",
      optional: true,
    },
    pdfMarginLeft: {
      type: "integer",
      label: "PDF Margin Left",
      description: "Sets a custom left margin on the PDF.",
      optional: true,
    },
    pdfScale: {
      type: "string",
      label: "PDF Scale",
      description: "Sets the scale factor of the website content in the PDF. Valid values are numbers between `0.1` and `2`. Default is `1`",
      optional: true,
    },
    pdfOrientation: {
      type: "string",
      label: "PDF Orientation",
      description: "Sets the orientation of the PDF.",
      options: PDF_ORIENTATION,
      optional: true,
    },
    pdfBackground: {
      type: "boolean",
      label: "PDF Background",
      description: "Sets whether to print background images in the PDF.",
      optional: true,
    },
    disableLigatures: {
      type: "boolean",
      label: "Disable Ligatures",
      description: "Prevents ligatures from being used. Useful when rendering a PDF, and you want to extract text which contains ligatures.",
      optional: true,
    },
    media: {
      type: "string",
      label: "Media",
      description: "By default, when generating a PDF, the print CSS media query is used. To generate a PDF using the screen CSS, set this option to screen.",
      options: PDF_MEDIA,
      optional: true,
    },
    force: {
      type: "boolean",
      label: "Force",
      description: "Generate a fresh screenshot or PDF, instead of getting a cached version.",
      optional: true,
    },
    unique: {
      type: "string",
      label: "Unique",
      description: "Pass a unique string such as a UUID, hash or timestamp, to have more control over when to generate a fresh screenshot or PDF. For example, you could do something like unique=$1681161683702 to get a new value for unique each time it is called.",
      optional: true,
    },
    ttl: {
      type: "integer",
      label: "ttl",
      description: "Short for 'time to live'. Number of seconds to keep a screenshot in the cache. Note the default is also the maximum value for this option. Default is `2592000 (30 days - this is also the maximum value)`.",
      optional: true,
    },
    proxy: {
      type: "string",
      label: "Proxy",
      description: "Pass in a proxy server address to make screenshot requests via that server in the format [address]:[port]. If proxy authentication is required, you can use the following format: [user]:[password]@[address]:[port].",
      optional: true,
    },
    header: {
      type: "string",
      label: "Header",
      description: "Set a header on the request when loading the URL. Example: To set the header with key `X-My-Header` to the value `SomeValue`, you would pass `header=X-My-Header%3DSomeValue`. This can be set multiple times, to set more than one header - e.g. `header=X-My-Header%3DSomeValue&header=X-My-Other-Header%3DSomeOtherValue`. As with all options passed via the query string, the header value must be URL encoded - so `X-My-Header=SomeValue` becomes `X-My-Header%3DSomeValue` in order to be interpreted correctly by Urlbox.",
      optional: true,
    },
    cookie: {
      type: "string",
      label: "Cookie",
      description: "Sets a cookie on the request when loading the URL. Example: To set the cookie with key `Opt-In` to the value `yes`, you would pass `cookie=Opt-In%3Dyes`. This can be set multiple times, to set more than one cookie - e.g.`cookie=Opt-In%3Dyes&cookie=Session-Id%3DMTIzNDU`. As with all options passed in the query string, the cookie value must be URL encoded - so `OptIn=true` becomes `OptIn%3Dtrue` in order to be interpreted correctly by Urlbox.",
      optional: true,
    },
    userAgent: {
      type: "string",
      label: "User Agent",
      description: "Sets the `User-Agent` string for the request.",
      options: USER_AGENTS,
      optional: true,
    },
    acceptLang: {
      type: "string",
      label: "Accept Lang",
      description: "Sets an Accept-Language header on requests to the target URL. Default is `en-US`.",
      optional: true,
    },
    authorization: {
      type: "string",
      label: "Authorization",
      description: "Sets an `Authorization` header on requests to the target URL. Can be used to pass an auth token through to the site in order to 'login' before rendering.",
      optional: true,
    },
    tz: {
      type: "string",
      label: "TZ",
      description: "Sets the local timezone to use for the screenshot. Default is `UTC`",
      optional: true,
    },
    delay: {
      type: "string",
      label: "Delay",
      description: "Amount of time to wait in milliseconds before urlbox takes the screenshot.",
      optional: true,
    },
    timeout: {
      type: "integer",
      label: "Timeout",
      description: "Amount of time to wait in milliseconds for the website at url to respond. Default is 30000.",
      optional: true,
    },
    waitUntil: {
      type: "string",
      label: "Wait Until",
      description: "Waits until the specified DOM event has fired before taking a screenshot or PDF.",
      options: WAIT_UNTIL,
      optional: true,
    },
    waitFor: {
      type: "string",
      label: "Wait For",
      description: "Waits for the element specified by this selector to be present in the DOM before taking a screenshot or pdf. By default, Urlbox will take a screenshot or PDF if the `wait_for` element is not found after waiting for the time specified by the `wait_timeout` option. If you prefer Urlbox to fail the request when the `wait_for` element is not found, pass `fail_if_selector_missing=true`",
      optional: true,
    },
    waitToLeave: {
      type: "string",
      label: "Wait To Leave",
      description: "Waits for the element specified by this selector to be absent from the DOM before taking a screenshot or PDF. A typical use-case would be waiting for loading spinners to be absent before taking a screenshot. By default, Urlbox will take a screenshot or PDF if the `wait_to_leave` element is still present after the time specified by the `wait_timeout` option. If you prefer Urlbox to fail the request when the `wait_to_leave` element is still present, pass `fail_if_selector_present=true`",
      optional: true,
    },
    waitTimeout: {
      type: "integer",
      label: "Wait Timeout",
      description: "The amount of time to wait for the `wait_for` element to be available before continuing, in milliseconds. Default is `30000 (30 seconds)`",
      optional: true,
    },
    scrollto: {
      type: "string",
      label: "Scroll To",
      description: "Scroll, to either an element or to a pixel offset from the top, before taking a screenshot of PDF.",
      optional: true,
    },
    click: {
      type: "string",
      label: "Click",
      description: "Specifies an element selector to click before generating a screenshot or PDF. Example: `#clickme` would click an element with `id=\"clickme\"`. Can be used multiple times to simulate multiple sequential click events. If the selector matches multiple elements, only the first element will be clicked.",
      optional: true,
    },
    clickAll: {
      type: "string",
      label: "Click All",
      description: "Specifies an element selector to click before generating a screenshot or PDF. Example: `.clickme` would click all elements with `class=\"clickme\"`. Can be used multiple times to simulate multiple sequential click events. If the selector matches multiple elements, all elements will be clicked.",
      optional: true,
    },
    hover: {
      type: "string",
      label: "Hover",
      description: "Specifies an element selector to hover over before generating a screenshot or PDF. Example: `#hoverme` would hover over the element with `id=\"clickme\".`",
      optional: true,
    },
    bgColor: {
      type: "string",
      label: "Bg Color",
      description: "Specify a hex code or CSS color string to use as the background color. Some websites don't set a body background colour, and will show up as transparent backgrounds with PNG, or black when using JPG. Use this setting to set a background colour. If the website explicitly sets a transparent background on the html or body elements, this setting will be overridden.",
      optional: true,
    },
    disable_js: {
      type: "boolean",
      label: "Disable JS",
      description: "Turn off javascript on target url to prevent popups. Enabling this option will prevent full_page=true and many other options, because having javascript disabled prevents Urlbox from evaluating code inside the page's context.",
      optional: true,
    },
    fullWidth: {
      type: "boolean",
      label: "Full Width",
      description: "When full_page=true, specify whether to capture the full width of the website, for example if the site is horizontally scrolling.",
      optional: true,
    },
    allowInfinite: {
      type: "boolean",
      label: "Allow Infinite",
      description: "By default, when Urlbox detects an infinite scrolling page, it does not attempt to continue scrolling to the bottom, as this could result in infinite scrolling! If you want to override this behaviour, pass `true` for this option.",
      optional: true,
    },
    skipScroll: {
      type: "boolean",
      label: "Skip Scroll",
      description: "Enabling `skip_scroll` will speed up renders by skipping an initial scroll through the page, which is used to trigger any lazy loading elements.",
      optional: true,
    },
    detectFullHeight: {
      type: "string",
      label: "Detect Full Height",
      description: "Some pages have full-height backgrounds whose heights are set to 100% of the viewport. This can cause the backgrounds to get stretched when making a full page screenshot. If you are seeing this behaviour in your full page screenshots, pass `true` for this option.",
      optional: true,
    },
    maxSectionHeight: {
      type: "integer",
      label: "Max Section Height",
      description: "When Urlbox takes a `full_page` screenshot, the maximum height of each image section is set to 4096 pixels. If a sites height is greater than this value, Urlbox will start splitting the screenshot into sections. Sometimes it is worthwhile experimenting with this number. Default is `4096`.",
      optional: true,
    },
    scrollIncrement: {
      type: "string",
      label: "Scroll Increment",
      description: "Sets how many pixels to scroll when scrolling the page to trigger lazy loading elements. By default, the scroll increment is set to the browser viewport height. Some pages' lazy loading elements only trigger when the scroll increment is smaller than this, however, e.g. 400px.",
      optional: true,
    },
    scrollDelay: {
      type: "string",
      label: "Scroll Delay",
      description: "When Urlbox decides to split a screenshot into multiple sections, the scroll delay is the time to wait between taking the screenshots of each individual section, in milliseconds. While Urlbox does detect animations, and attempts to wait for them before taking a screenshot, this option could be used to force Urlbox to wait for a certain amount of time after scrolling to the next section, to wait for things like animations to finish.",
      optional: true,
    },
    turbo: {
      type: "string",
      label: "Turbo",
      description: "Warning This is an experimental option. Used to speed up full page screenshots, but at the expense of accuracy.",
      optional: true,
    },
    highlight: {
      type: "string",
      label: "Highlight",
      description: "Word to highlight on the page before capturing a screenshot.",
      optional: true,
    },
    highlightfg: {
      type: "string",
      label: "Highlight Fg",
      description: "Text color of the highlighted word. Default is `white`.",
      optional: true,
    },
    highlightbg: {
      type: "string",
      label: "Highlight Bg",
      description: "Background color of the highlighted word. Default is `red`.",
      optional: true,
    },
    latitude: {
      type: "string",
      label: "Latitude",
      description: "Sets the latitude used to emulate the Geolocation API.",
      optional: true,
    },
    longitude: {
      type: "string",
      label: "Longitude",
      description: "Sets the longitude used to emulate the Geolocation API.",
      optional: true,
    },
    accuracy: {
      type: "string",
      label: "Accuracy",
      description: "Sets the accurate of the Geolocation API, in metres.",
      optional: true,
    },
    useS3: {
      type: "boolean",
      label: "Use S3",
      description: "Save the screenshot directly to the S3 bucket configured on your account.",
      optional: true,
    },
    s3Path: {
      type: "string",
      label: "S3 Path",
      description: "Sets the S3 path, including subdirectories and the filename, to use when saving the screenshot in your S3 bucket. The extension (.png, .jpg or .pdf) will be provided automatically, and should not be included in s3_path.",
      optional: true,
    },
    s3Bucket: {
      type: "string",
      label: "S3 Bucket",
      description: "Overrides the configured S3 bucket to use when saving the screenshot.",
      optional: true,
    },
    s3StorageClass: {
      type: "string",
      label: "S3 Storage Class",
      description: "Sets the s3 storage class.",
      options: S3_STORAGE_CLASSES,
      optional: true,
    },
    failIfSelectorMissing: {
      type: "boolean",
      label: "Fail If Selector Missing",
      description: "Fails the request if the elements specified by `selector` or `wait_for` options are not found on the page after waiting for `wait_timeout`.",
      optional: true,
    },
    failIfSelectorPresent: {
      type: "boolean",
      label: "Fail If Selector Present",
      description: "Fails the request if the element specified by `wait_to_leave` option is found on the page after waiting for `wait_timeout`.",
      optional: true,
    },
    failOn4xx: {
      type: "boolean",
      label: "Fail On 4XX",
      description: "If `fail_on_4xx=true` and the requested URL returns a status code between 400 and 499, Urlbox will fail the request with error code 400 and the message: `Failed to render. Requested URL returned a 4xx error code and fail_on_4xx was true`.",
      optional: true,
    },
    failOn5xx: {
      type: "boolean",
      label: "Fail On 5XX",
      description: "If `fail_on_5xx=true` and the requested URL returns a status code between 500 and 599, Urlbox will fail the request with error code 400 and message: `Failed to render. Requested URL returned a 5xx error code and fail_on_5xx was true`.",
      optional: true,
    },
  },
  methods: {
    _apiUrl() {
      return `https://api.urlbox.io/v1/${this.$auth.publishable_key}`;
    },
    async _makeRequest({
      $ = this, data,
    }) {
      const secret = this.$auth.secret_key;
      const query = toQueryString(data);
      const config = {
        url: `${this._apiUrl()}/${generateToken(query, secret)}${data.format}?${query}`,
      };
      return axios($, config);
    },
    generateScreenshot({
      $, data,
    }) {
      return this._makeRequest({
        $,
        data: {
          response_type: "json",
          ...data,
        },
      });
    },
  },
};
