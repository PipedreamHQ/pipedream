import l3mbda from "../../l3mbda.app.mjs";
import sampleEmit from "./test-event.mjs";

export default {
  key: "l3mbda-erc-20-transfer",
  name: "ERC20 Token Transfer",
  description:
        "Emits a new event when a new ERC20 transfer is detected by [l3mbda.](https://l3mbda.com/)",
  version: "0.0.2",
  type: "source",
  dedupe: "unique",
  props: {
    l3mbda,
    db: "$.service.db",
    http: {
      type: "$.interface.http",
      customResponse: false,
    },
    //! IS THIS THE RIGHT WAY TO SET UP THE INPUT FIELDS?
    from: {
      propDefinition: [
        l3mbda,
        "from",
      ],
      optional: true,
    },
    to: {
      propDefinition: [
        l3mbda,
        "to",
      ],
      optional: true,
    },
    token: {
      propDefinition: [
        l3mbda,
        "token",
      ],
      optional: true,
    },
    amount: {
      propDefinition: [
        l3mbda,
        "amount",
      ],
      optional: true,
    },
  },
  methods: {
    _getEndpointId() {
      return this.db.get("endpointId");
    },
    _setEndpointId(endpointId = null) {
      this.db.set("endpointId", endpointId);
    },
  },
  hooks: {
    async deploy() {},
    async activate() {
      const filters = [];

      if (this.to) {
        filters.push({
          "type": "to",
          "value": this.to,
        });
      }

      if (this.from) {
        filters.push({
          "type": "from",
          "value": this.from,
        });
      }

      if (this.token) {
        filters.push({
          "type": "token",
          "value": this.token,
        });
      }

      if (this.amount) {
        filters.push({
          "type": "amount",
          "value": this.amount,
        });
      }

      const response = await this.l3mbda.createEndpoint({
        name: "Pipedream BLOCK",
        description: "Pipedream & L3mbda Integration",
        action: "webhook",
        filters: filters,
        //! IS THIS THE RIGHT WAY TO GET THE ENDPOINT URL GENERATED BY PIPEDREAM?
        url: this.http.endpoint,
        event: "erc20-transfer",
      });

      this._setWebhookId(response.id);
    },
    async deactivate() {
      const id = this._getEndpointId();
      await this.l3mbda.deleteEndpoint(id);
    },
  },
  async run(event) {
    this.$emit(event.body);
  },
  sampleEmit,
};
