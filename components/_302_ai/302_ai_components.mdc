---
alwaysApply: true
---
Write the actions for the 302.AI app.

General guidelines:
- Avoid manual truthiness checks for optional parameters, as @pipedream/platform utilities (@pipedream/axios) automatically exclude undefined values.
- Make sure to wrap API calls with the _makeRequest method. All actions methods need to call the _makeRequest methods. No actions method should call axios directly.
- Don't use the "number" datatype in props, use "string" instead for "number" datatypes. 
- Parameters that in the API documentation are boolean will be defined as type "string with options as `default: "0",options: ["0","1",],` setting the default to "0" or "1" as appropiate per the API documentation. Then in the component code parse it to boolean type variable such as in `include_performers: parseInt(this.includePerformers) === 1,`
- In the package.json file essentially you'll only set the dependencies property, set version prop to "0.1.0", you can refer to the following example that was created for Leonardo AI components:
```
{
  "name": "@pipedream/leonardo_ai",
  "version": "0.1.0",
  "description": "Pipedream Leonardo AI Components",
  "main": "leonardo_ai.app.mjs",
  "keywords": [
    "pipedream",
    "leonardo_ai"
  ],
  "homepage": "https://pipedream.com/apps/leonardo_ai",
  "author": "Pipedream <support@pipedream.com> (https://pipedream.com/)",
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "@pipedream/platform": "^3.1.0",
    "form-data": "^4.0.4"
  }
}
```
--as a reference of an example API call to 302.AI API, including authorization, you can use the one we feature at Pipedream. Remember, you'll wrap API calls inside _makeRequest and action methods need to call _makeRequest.
```
import { axios } from "@pipedream/platform"
export default defineComponent({
  props: {
    _302_ai: {
      type: "app",
      app: "_302_ai",
    }
  },
  async run({steps, $}) {
    return await axios($, {
      url: `https://api.302.ai/v1/models`,
      headers: {
        Authorization: `Bearer ${this._302_ai.$auth.api_key}`,
      },
    })
  },
})
--The 302.AI API is "OpenAI compliant", so 302.AI API URL is https://api.302.ai or https://api.302.ai/v1 and are analogous to OpenAI's  https://api.openai.com and https://api.openai.com/v1 respectively
--For each prop that is used more than one create a propDefinition for it and reuse it in component code, changing description, detaults as needed.
--For the model prop which is likely used in several components using async options based on the List Models enpoint documented at https://doc.302.ai/147522038e0
```
chat-with-302-ai
Prompt: Send a message to the 302.AI Chat API using. Ideal for dynamic conversations, contextual assistance, and creative generation.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/147522039e0)

chat-using-functions
Prompt: Enable your 302.AI model to invoke user-defined functions. Useful for conditional logic, workflow orchestration, and tool invocation within conversations.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/211560247e0)

summarize-text
Prompt: Summarize long-form text into concise, readable output using the 302.AI Chat API. Great for reports, content digestion, and executive briefs.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/147522039e0)

classify-items
Prompt: Classify input items into predefined categories using 302.AI models. Perfect for tagging, segmentation, and automated organization.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/147522039e0)

create-embeddings
Prompt: Generate vector embeddings from text using the 302.AI Embeddings API. Useful for semantic search, clustering, and vector store indexing.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/147522048e0)

create-completion
Prompt: Send a prompt to the legacy endpoint on 302.AI to generate text using models like . Recommended for backward-compatible flows.
-When you come up for the description for this component follow format: <component description>. [See documentation](https://doc.302.ai/147522039e0)

